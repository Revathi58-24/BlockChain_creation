# -*- coding: utf-8 -*-
"""blockchain.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Dcnh984RIhIMMj-i0PaqqS5wJIe84GMh
"""

import hashlib
import json
from time import time

# Define the Block class
class Block:
    def __init__(self, index, timestamp, supply_chain_record, previous_hash):
        self.index = index  # Position of the block in the blockchain
        self.timestamp = timestamp  # Time when the block was created
        self.supply_chain_record = supply_chain_record  # Supply chain data stored in the block
        self.previous_hash = previous_hash  # Hash of the previous block in the blockchain
        self.hash = self.hash_block()  # Calculate the hash of the current block

    def hash_block(self):
        # Serialize the block's attributes to a JSON string, encode it, and hash it using SHA-256
        block_string = json.dumps(self.__dict__, sort_keys=True).encode()
        return hashlib.sha256(block_string).hexdigest()

    def __repr__(self):
        # Provide a string representation of the block for easy printing
        return (f"Block(index={self.index}, timestamp={self.timestamp}, "
                f"supply_chain_record={self.supply_chain_record}, hash={self.hash})")

# Define the Blockchain class
class Blockchain:
    def __init__(self):
        self.chain = []  # List to store the blocks in the blockchain
        self.create_genesis_block()  # Create the genesis block (first block)

    def create_genesis_block(self):
        # Create the genesis block with default values and append it to the chain
        genesis_block = Block(0, time(), {"message": "Genesis Block"}, "0")
        self.chain.append(genesis_block)

    def get_last_block(self):
        # Return the last block in the chain
        return self.chain[-1]

    def add_block(self, supply_chain_record):
        # Get the last block in the chain
        last_block = self.get_last_block()
        # Create a new block with the next index, current timestamp, supply chain record, and hash of the last block
        new_block = Block(len(self.chain), time(), supply_chain_record, last_block.hash)
        # Append the new block to the chain
        self.chain.append(new_block)

    def __repr__(self):
        # Provide a string representation of the entire blockchain for easy printing
        return json.dumps([block.__dict__ for block in self.chain], indent=4)

# Create a new blockchain
supply_chain_blockchain = Blockchain()

# Add supply chain records to the blockchain
supply_chain_blockchain.add_block({"product_id": "P001", "status": "Manufactured", "location": "Factory"})
supply_chain_blockchain.add_block({"product_id": "P001", "status": "Shipped", "location": "Warehouse"})
supply_chain_blockchain.add_block({"product_id": "P001", "status": "Delivered", "location": "Retail Store"})

# Print the blockchain to see the details of all the blocks
print(supply_chain_blockchain)